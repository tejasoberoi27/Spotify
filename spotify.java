package lab2;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;


class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                     new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                   reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }
	
    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
}



public class spotify {

	private static ArrayList<Song> songs = new ArrayList<Song>();
	private static ArrayList<Customer> customer_base = new ArrayList<Customer>();
	private static ArrayList<Artist> artist_base = new ArrayList<Artist>();
	/*
	 The subscriptions as defined below :
1 Free - 1 song, 0 downloads
2 Rs. 100 - max 5 songs, max 2 downloads
3 Rs. 500 - max 10 songs, max 5 downloads
4 Rs. 1000 - Unlimited access
	 */

	public static void add_song(Song s)
	{
		songs.add(s);
	}

	public static Customer find_cust_by_id(int id)
	{
		Customer found = null;
		for(int j=0;j<customer_base.size();j++)
		{
			if(customer_base.get(j).getId()==id)
			{
				found = customer_base.get(j);
				break;

			}
		}
		return found;
	}

	public static Artist find_art_by_id(int id)
	{
		Artist found = null;
		for(int j=0;j<artist_base.size();j++)
		{
			if(artist_base.get(j).getId()==id)
			{
				found = artist_base.get(j);
				break;

			}
		}
		return found;
	}

	public static void main(String[] args)throws IOException {
		int q;
		Reader.init(System.in);
		q = Reader.nextInt();
		for(int i=0;i<q;i++)
		{
			int type;
			type = Reader.nextInt();

			switch (type) {
			case 1:
				/* Create new artist or customer
​.
a. Each artist and customer have a unique ID and a name.
b. Default customer subscription is free
c. Each query specifies whether it is an artist(A) or customer(C) followed by their
name. Output their name and the system generated unique ID.	*/
				String user_type;
				user_type = Reader.next();
				String user_name;
				user_name = Reader.next();
				if(user_type.equalsIgnoreCase("C"))
				{
					customer_base.add(new Customer(user_name));
					System.out.println(user_name+" "+customer_base.get(customer_base.size()-1).getId());
				}
				else if(user_type.equalsIgnoreCase("A"))
				{
					artist_base.add(new Artist(user_name));
					System.out.println(user_name+" "+artist_base.get(artist_base.size()-1).getId());
				}
				else
				{
					System.err.println("invalid query");
				}

				break;
			case 2:
				/*
				Change customer’s subscription
				a. Take customer’s unique ID as input and their preference of subscription based on
				the list provided above indexed from 1.
				 */
				int customer_id;
				customer_id = Reader.nextInt();
				int subs_pref;
				subs_pref = Reader.nextInt();
				Customer cust= find_cust_by_id(customer_id);
				if(cust==null)
				{
					System.err.println("invalid customer id");
				}
				else
				{
					cust.change_subs(subs_pref);
				}
				break;
			case 3:
				/*Add new albums for the artist
a. Take artist’s unique ID as input. After this the next input ‘n’ would indicate the
number of songs to add. Each song will be space separated. You should output
the unique ID for each song generated by the system in a single line space
separated. 	*/ 
				int art_id = Reader.nextInt();
				int n = Reader.nextInt();
				String s[] = new String[n];
				for(int j=0;j<n;j++)
				{
					s[j]=Reader.next();
				}
				Artist art = find_art_by_id(art_id);
				if(art==null)
				{
					System.err.println("invalid artist id");
				}
				else
				{
					System.out.println();
					for(int j=0;j<n;j++)
					{
						Song m = new Song(art,s[j]);
						add_song(m);
						art.add_song(m);
						System.out.print(s[j]+" "+ m.getId()+" ");
					}	
				}
				break;
			case 4:
				/*Pay the artist if any royalties are pending
a. Print out the total amount that the application must pay the artist since the last
time the royalties were paid. After this the artist’s royalties go back to 0*/
				art_id = Reader.nextInt();
				art = find_art_by_id(art_id);
				if(art==null)
				{
					System.err.println("invalid artist id");
				}
				else
				{
					User user = art;
					int royalty= user.transaction();
					System.out.println(royalty);
					user.refresh();//sets royalty to 0
				}
				break;
			case 5:
				/*Allow customer or artist to stream music
a. For customer take a list of songs as input which he want to stream and for each
of those input also take whether they want to download of play the song. You
need to calculate the fees for the customer based on their streaming sessions.
b. The same should happen the artists but no royalties should be generated.
c. First take the unique ID as input. The next input indicate the number of songs
that the user wants to stream. Next input will be the songs where each song is
specified whether the user wants to download(D) or play(P).*/
				int user_id = Reader.nextInt();
				//even=artist
				int valid=1;
				int num = Reader.nextInt(),ifart = 0 , ifcust = 0;
				User user = null;
				if(user_id%2==0)
				{
					art = find_art_by_id(user_id);
					if(art==null)
					{
						System.err.println("invalid artist id");
						valid=0;
					}					
					else
					{
						ifart=1;
						user =art;
					}
				}
				else
				{
					cust= find_cust_by_id(user_id);
					if(cust==null)
					{
						System.err.println("invalid customer id");
						valid=0;
					}
					else
					{
						ifcust=1;
						user = cust;
					}
				}
				ArrayList<Song> history = null;
				if(valid==1 && user!=null)
				{
					history = new ArrayList<Song>();  
					for(int j=0;j<num;j++)
					{
						int song_id = Reader.nextInt();
						String option = Reader.next();
						if(song_id>=songs.size())
						{
							System.err.println("invalid song id");
						}
						else
						{
							history.add(songs.get(song_id));
							user.Stream(songs,num,song_id,option);
						}
					}

				}
				int arr[] = new int[num];
				for(int k=0;k<num;k++)
				{
					arr[k]= Reader.nextInt();
				}
				System.out.println();
				if(history!=null)
				{
				for(int k=0;k<num;k++)
				{
					System.out.print(history.get(arr[k]-1).getName()+" ");
				}
				}

				break;
			case 6:
				/*Print the charges that customers needs to pay
a. Take the input as unique ID and then print out the charges 
for that customer based on their subscription fees*/
				int cust_id = Reader.nextInt();
				cust= find_cust_by_id(cust_id);
				if(cust==null)
				{
					System.err.println("invalid customer id");
				}
				else
				{
					user = cust;
					int due= user.transaction();
					System.out.println(due);
				}


				break;
			case 7:
				/*Print details of the customers or artists
​.
a. Take the input of customer ID and print their Name, unique ID and subscription
ID based on the list provided before indexed from 1.
b. Take the input of artist ID and print their Name, unique ID followed by a
semicolon. Next print out the songs in a comma separated fashion.*/

				valid=1;
				user_id = Reader.nextInt();
				ifart = 0 ;
				ifcust = 0;
				user = null;
				if(user_id%2==0)
				{
					art = find_art_by_id(user_id);
					if(art==null)
					{
						System.err.println("invalid artist id");
						valid=0;
					}					
					else
					{
						ifart=1;
						user =art;
					}
				}
				else
				{
					cust= find_cust_by_id(user_id);
					if(cust==null)
					{
						System.err.println("invalid customer id");
						valid=0;
					}
					else
					{
						ifcust=1;
						user = cust;
					}
				}

				if(valid==1 && user!=null)
				{
					String details= user.Display();
					System.out.println(details);
				}

				break;
			default:
				System.out.println("invalid query type");
				break;
			}
		}

	}


	//	public static int getCustomer_id() {
	//		return customer_id;
	//	}
	//
	//
	//	public static void setCustomer_id(int customer_id) {
	//		spotify.customer_id = customer_id;
	//	}
	//
	//
	//	public static int getArtist_id() {
	//		return artist_id;
	//	}
	//
	//
	//	public static void setArtist_id(int artist_id) {
	//		spotify.artist_id = artist_id;
	//	}

}
